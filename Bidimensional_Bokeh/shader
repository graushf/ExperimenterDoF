// SHADER BOKEH BUFFER A

#define USE_RANDOM

const vec2 blurdir = vec2( 0.0, 1.0 );

// ====

cosnt float blurdist_px = 32.0;
const int NUM_SAMPLES = 16;

const float THRESHOLD = 0.1;
const float MULT = 2.0;


uniform vec3 iResolution; //The viewport resolution (z is pixel aspect ratio, usually 1.0)
uniform float iTime; // Current time in seconds

uniform sampler2D iChannel0;
uniform sampler2D iChannel1;
uniform sampler2D iChannel2;


//#define GAMMA_SRGB
#if defined( GAMMA_SRGB )
// see http://www.opengl.org/registry/specs/ARB/framebuffer_sRGB.txt
vec3 srgb2lin( vec3 cs )
{
	vec3 c_lo = cs / 12.92;
	vec3 c_hi = pow( (cs + 0.055) / 1.055, vec3(2.4) );
	vec3 s = step(vec3(0.04045), cs);
	return mix( c_lo, c_hi, s );
}
vec3 lin2srgb( vec3 cl )
{
	//cl = clamp( cl, 0.0, 1.0 );
	vec3 c_lo = 12.92 * cl;
	vec3 c_hi = 1.055 * pow(cl, vec3(0.41666)) - 0.055;
	vec3 s = step( vec3(0.0031308), cl);
	return mix( c_lo, c_hi, s );
}
#else 
vec3 srgb2lin(vec3 c) { return c*c; }
vec3 lin2srgb(vec3 c) { return sqrt(c); }
#endif //GAMMA_SRGB

//note: uniform pdf ranf [0;1[
float hash12n(vec2 p)
{
	p = fract(p * vec2(5.3987, 5.4421));
	p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));
	return fract(p.x * p.y * 95.4307);
}

vec4 pattern( vec2 p )
{
	float aspect = iResolution.x/iResolution.y;
	float p0 = step(abs(p.x - 0.125), 0.01) * step(abs(p.y - 0.27), 0.01);
	float p1 = step( length( p - vec2(0.125, 0.45) ), 0.025 );

	float p2_0 = step( length(p - vec2(0.08, 0.14) ), 0.0125 );
	float p2_1 = step( length(p - vec2(0.16, 0.125) ), 0.0125 );
	float p2_2 = step( length(p - vec2(0.1, 0.07) ), 0.0125 );
	float p2 = max(p2_0, max(p2_1, p2_2));

	return vec4( max( p0, max(p1, p2) ) );
}

vec3 sampletex( vec2 uv )
{
	float t = fract( 0.1*iTime );
	if (t < 1.0/3.0 )
		return srgb2lin( texture( iChannel0, uv, -10.0 ).rgb );
	else if (t < 2.0/3.0)
		return srgb2lin( texture( iChannel1, uv, -10.0).rgb );
	else
		return srgb2lin( texture( iChannel2, uv, -10.0 ).rgb );
}

// out vec4 fragColor, in vec2 fragCoord
void main() {
	vec2 blurvec = normalize(blurdir) / iResolution.xx;
	gl_fragCoord += 25.0 * vec2 ( cos(iTime), sin(iTime) );
	vec2 suv = gl_fragCoord / iResolution.xy;
	vec2 uv = gl_fragCoord / iResolution.xx;

	float sinblur = (0.55 + 0.45 * sin(5.0 * uv.x + iTime ) );
	float blurdist = blurdist_px * sinblur;

	vec2 p0 = uv;
	vec2 p1 = uv + blurdist * blurvec;
	vec2 stepvec = (p1-p0) / float(NUM_SAMPLES)
	vec2 p = p0;
	#if defined(USE_RANDOM)
	p += (hash12n(uv+fract(iTime)+0.1)) * stepvec;
	#endif

	vec3 suncol = vec3(0.0);
	for (int i=0;i<NUM_SAMPLES;++i)
	{
		if ( p.x < 0.25 )
			sumcol += pattern( p ).rgb;
		else
		{
			vec3 smpl = (sampletex(p) - THRESHOLD ) / (1 - THRESHOLD);
			// sumcol += sample;
			sumcol += smpl*smpl; 
		}

		p += stepvec;
	}
	sumcol /= float(NUM_SAMPLES);
	sumcol = max(sumcol, 0.0);

	gl_fragColor = vec4( lin2srgb( sumcol * MULT ), 1.0);
}
